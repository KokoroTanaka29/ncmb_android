apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

version = '4.0.2'
group = 'com.nifcloud.mbaas'


buildscript {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}
android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'

    defaultConfig {
        minSdkVersion 14
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable 'GradleDependency'
        lintConfig file("lint.xml")
    }
}
repositories {
    google() //これが使えていないのかも！！！！
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.google.firebase:firebase-messaging:22.0.0'
    implementation 'com.google.android.gms:play-services-base:17.6.0'
    implementation 'com.google.code.gson:gson:2.8.9'

    implementation 'androidx.appcompat:appcompat:1.1.0'

    testImplementation 'junit:junit:4.12'
    testImplementation "org.robolectric:robolectric:3.0"
    testImplementation 'org.robolectric:shadows-httpclient:3.0'
    testImplementation 'com.squareup.okhttp:mockwebserver:2.3.0'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.5'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.5'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.5'
    testImplementation 'org.powermock:powermock-classloading-xstream:1.6.5'
    testImplementation 'org.yaml:snakeyaml:1.15'
    testImplementation 'org.skyscreamer:jsonassert:1.2.3'
    testImplementation "org.robolectric:shadows-play-services:3.0"
    testImplementation "org.robolectric:shadows-support-v4:3.0"
}

task clearJar(type: Delete) {
    delete 'build/libs/' + JAR_NAME
}
task makeJar(type: Copy) {
    from('build/intermediates/intermediate-jars/release')
    into('release/')
    include('classes.jar')
    rename('classes.jar', JAR_NAME)
}
makeJar.dependsOn(clearJar, build)



//task javadocJar(type: Jar) {
//    classifier = 'javadoc'
//    from javadoc
//}
//
ext.sharedManifest = manifest {
    attributes(
            "Implementation-Title": project.name,
            "Implementation-Version": version,
            "Implementation-Vendor": project.group,
            "Bundle-Vendor": project.group
    )
}


task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
    manifest {
        from sharedManifest
    }
}

//task sourcesJar(type: Jar) {
//    classifier = 'sources'
//    from sourceSets.main.allSource
//}
//

//task sourcesJar(type: Jar) {
//    from sourceSets.main.allJava
//    manifest {
//        from sharedManifest
//    }
//}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar, sourcesJar
}



signing {
    useGpgCmd()
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}
//以下のようにするというのもあった
//if (project.hasProperty("signing.keyId")) {
//    apply plugin: 'signing'
//    signing {
//        useGpgCmd()
//        sign configurations.archives
//    }
//}

uploadArchives{
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'ncmb_android'
        packaging 'jar'
        // optionally artifactId can be defined here
        description 'A application used as an example on how to set up pushing  its components to the Central Repository.'
        url 'https://mbaas.nifcloud.com/doc/current/index.html#/Android'

        scm {
          connection 'scm:git:https://github.com/NIFCLOUD-mbaas/ncmb_android.git'
          developerConnection 'scm:git:https://github.com/NIFCLOUD-mbaas/ncmb_android.git'
          url 'https://github.com/NIFCLOUD-mbaas/ncmb_android'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'ncmbsdk'
            name 'NCMB SDK Team'
            email 'ncmb_sdk@list.fjct.fujitsu.com'
          }
        }
      }
    }
  }
}